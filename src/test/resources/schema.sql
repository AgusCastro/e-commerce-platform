CREATE SCHEMA ecommerce;
SET SCHEMA 'ecommerce';

CREATE TABLE IF NOT EXISTS STATUS (
    id SMALLINT PRIMARY KEY CHECK ( id >= 0 ),
    description VARCHAR(100) NOT NULL
);
INSERT INTO  STATUS (id, description)  VALUES (0, 'PENDING') ON CONFLICT(id) DO UPDATE SET description = 'PENDING';
INSERT INTO STATUS (id, description) VALUES (1, 'CONFIRMED') ON CONFLICT(id) DO UPDATE SET description = 'CONFIRMED';
INSERT INTO STATUS (id, description) VALUES (2, 'SHIPPED') ON CONFLICT(id) DO UPDATE SET description = 'SHIPPED';
INSERT INTO STATUS (id, description) VALUES (3, 'DELIVERED') ON CONFLICT(id) DO UPDATE SET description = 'DELIVERED';
INSERT INTO STATUS (id, description) VALUES (4, 'CANCELED') ON CONFLICT(id) DO UPDATE SET description = 'CANCELED';

CREATE TABLE IF NOT EXISTS PRODUCT (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    description VARCHAR(100),
    discontinued BOOL DEFAULT false NOT NULL,
    name VARCHAR(40) NOT NULL,
    price DECIMAL(12,2) NOT NULL CHECK ( price > 0 ),
    stock INTEGER NOT NULL
);

CREATE TABLE IF NOT EXISTS ORDERS (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    creation_date DATE DEFAULT CURRENT_DATE NOT NULL,
    customer_name VARCHAR(100) NOT NULL,
    delivery_address VARCHAR(250) NOT NULL,
    delivery_date DATE,
    status SMALLINT NOT NULL REFERENCES STATUS(id)
);

CREATE TABLE IF NOT EXISTS ORDER_ITEM (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    quantity INTEGER NOT NULL CHECK ( quantity >= 0 ),
    unit_price DECIMAL(12,2) NOT NULL CHECK ( unit_price > 0 ),
    order_id BIGINT NOT NULL REFERENCES ORDERS(id),
    product_id BIGINT NOT NULL REFERENCES PRODUCT(id),
    UNIQUE (order_id, product_id)
);
